import os,re,sys
from collections import defaultdict


if len(sys.argv) != 9:
	print("\nMeta_gene_abundance.py is a Python2/3 compatible script.\n\nUsage:  python Meta_gene_abundance.py -d input_depth_file -g input_gff_file -n reads_number -o output_abundance_file\n\n    -d  Name of input depth file generated by the command 'samtools depth'\n    -g  Name of input GFF file generated by Prodigal\n    -n  Number of paired reads\n    -o  Name of output abundance file. This file contains three columns, i.e. gene ID, coverage depth and abundance value")
	sys.exit(1)

# Define a list of valid options
valid_options = ['-d', '-g', '-n', '-o']

# Check if the options are valid
for i in range(1, len(sys.argv), 2):
	option = sys.argv[i]
	if option not in valid_options:
		print("Options must be -d, -g, -n, or -o")
		sys.exit(1)

options_values = {}
for i in range(1, len(sys.argv), 2):
	options_values[sys.argv[i]] = sys.argv[i + 1]


def gff_parser(gffFile):
	geneDict = defaultdict(list)
	for line in open(gffFile):
		if not line.startswith('#'):
			contig = line.split()[0]
			pattern = r'ID=(.*?);'
			match = re.search(pattern, line)
			seq_data = match.group(1).split('_')[1]
			geneName = contig+'_'+seq_data
			locationS = line.split()[3]
			locationE = line.split()[4]
			geneDict[geneName] = [contig,locationS,locationE]
	return geneDict

def average_depth(depthFile,geneDict,readsnum,outFile):
	with open(outFile,'w') as outHandle:
		depthDict = defaultdict(float)
		depthFileDict = defaultdict(list)
		for line in open(depthFile):
			seps = line.strip().split('\t')
			depthFileDict[seps[0]].append([seps[1],int(seps[2])])
		for geneName in geneDict:
			geneContig = geneDict[geneName][0]
			geneStart = geneDict[geneName][1]
			geneEnd = geneDict[geneName][2]
			pointer = 0
			depthList = []
			contigDepthList = depthFileDict[geneContig]
			for eachDepth in contigDepthList:
				if eachDepth[0] == geneStart:
					pointer = 1
					depthList.append(eachDepth[1])
				elif eachDepth[0]== geneEnd:
					pointer = 2
					depthList.append(eachDepth[1])
					break
				elif pointer==1:
					depthList.append(eachDepth[1])
			if len(depthList)!=0:
				sumDepth = sum(depthList)
				averageDepth = sumDepth*1.0/len(depthList)
				abundance = averageDepth/float(readsnum)*10000000
				outHandle.write(geneName+'\t'+"{:.1f}".format(averageDepth,1)+'\t'+"{:.1f}".format(abundance,1)+'\n')
			else:
				for eachDepth in contigDepthList:
					if geneStart<=eachDepth[0]<=geneEnd:
						depthList.append(eachDepth[1])
				if len(depthList)!=0:
					sumDepth = sum(depthList)
					averageDepth = sumDepth*1.0/len(depthList)
					abundance = averageDepth/float(readsnum)*10000000
					outHandle.write(geneName+'\t'+"{:.1f}".format(averageDepth,1)+'\t'+"{:.1f}".format(abundance,1)+'\n')


if __name__ == '__main__':
	depthFile = options_values['-d']
	gffFile = options_values['-g']
	readsnum = options_values['-n']
	outFile = options_values['-o']
	geneDict = gff_parser(gffFile)
	average_depth(depthFile,geneDict,readsnum,outFile)


